# -*- coding: utf-8 -*-
"""FinanceAgent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RyUVjS3y0vYHLOmkiWeFxkP2Uh_mwzyo
"""

# Cell 1: Installations for AlphaTrack AI Final Edition
!pip install -q --upgrade google-generativeai
!pip install -q streamlit yfinance pandas prophet plotly requests pyngrok finnhub-python streamlit-autorefresh streamlit-searchbox
# Cell 2: Download Ticker Data for Autocomplete
!wget https://raw.githubusercontent.com/dataprofessor/streamlit-stock-price/master/nasdaq_screener_168_companies.csv -O nasdaq_tickers.csv
!wget https://raw.githubusercontent.com/ashish-p-s/stock_market_data_for_india/main/bse_company_list.csv -O bse_tickers.csv
!wget https://raw.githubusercontent.com/ashish-p-s/stock_market_data_for_india/main/nse_company_list.csv -O nse_tickers.csv

!mkdir -p .streamlit
!touch .streamlit/config.toml

# Commented out IPython magic to ensure Python compatibility.
# %%writefile .streamlit/config.toml
# [theme]
# base="dark"
# primaryColor="#7928a1" # A vibrant purple
# backgroundColor="#0d1117" # GitHub Dark background
# secondaryBackgroundColor="#161b22" # GitHub Dark secondary background
# textColor="#c9d1d9" # GitHub Dark text
# font="sans serif"
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile portfolio_dashboard.py
# import streamlit as st
# import yfinance as yf
# import pandas as pd
# import plotly.graph_objects as go
# from datetime import date, timedelta
# import os
# import google.generativeai as genai
# import streamlit_searchbox
# 
# # --- Page Configuration ---
# st.set_page_config(layout="wide", page_title="AlphaTrack Global Pro", page_icon="🌍")
# 
# # --- API & Data Persistence Setup ---
# try:
#     GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
#     genai.configure(api_key=GEMINI_API_KEY)
#     gemini_model = genai.GenerativeModel('gemini-1.5-flash-latest')
# except Exception:
#     st.warning("⚠️ Gemini AI features are disabled. Please set your GEMINI_API_KEY in Colab Secrets.")
# 
# PORTFOLIO_FILE = 'portfolio.csv'
# def load_portfolio():
#     return pd.read_csv(PORTFOLIO_FILE) if os.path.exists(PORTFOLIO_FILE) else pd.DataFrame(
#         columns=['ticker', 'display_ticker', 'exchange', 'shares', 'purchase_date', 'purchase_price']
#     )
# 
# def save_portfolio(df):
#     df.to_csv(PORTFOLIO_FILE, index=False)
# 
# # --- Data Fetching & Caching ---
# @st.cache_data
# def load_ticker_symbols(exchange):
#     try:
#         if exchange == 'NASDAQ (USA)' and os.path.exists('nasdaq_tickers.csv'):
#             return pd.read_csv('nasdaq_tickers.csv')['Symbol'].tolist()
#         if exchange == 'NSE (India)' and os.path.exists('nse_tickers.csv'):
#             return pd.read_csv('nse_tickers.csv')['SYMBOL'].tolist()
#         if exchange == 'BSE (India)' and os.path.exists('bse_tickers.csv'):
#             return pd.read_csv('bse_tickers.csv')['Symbol'].tolist()
#     except Exception:
#         return []
#     return []
# 
# @st.cache_data
# def get_stock_data(ticker, period="1y", interval="1d"):
#     return yf.download(ticker, period=period, interval=interval, progress=False)
# 
# def get_current_price(ticker):
#     try:
#         return yf.Ticker(ticker).history(period='1d')['Close'].iloc[0]
#     except Exception:
#         return None
# 
# @st.cache_data
# def get_company_info(ticker):
#     try:
#         return yf.Ticker(ticker).info
#     except Exception:
#         return {}
# 
# # --- Main App ---
# st.title("AlphaTrack Global Pro 🌍")
# portfolio_df = load_portfolio()
# 
# # --- Sidebar ---
# with st.sidebar:
#     st.header("💼 Add to Portfolio")
#     exchange = st.radio("Select Exchange", ('NASDAQ (USA)', 'NSE (India)', 'BSE (India)'), horizontal=True, index=0)
#     ticker_list = load_ticker_symbols(exchange)
# 
#     def search_tickers(search_term):
#         if not search_term or not ticker_list:
#             return []
#         return [t for t in ticker_list if t and search_term.upper() in t.upper()][:5]
# 
#     if ticker_list:
#         ticker_input = streamlit_searchbox.searchbox(search_tickers, key="stock_search", placeholder="Search tickers...")
#     else:
#         ticker_input = st.text_input("Ticker Symbol", placeholder="e.g., AAPL")
# 
#     shares = st.number_input("Number of Shares", min_value=1, value=1, step=1)
#     purchase_date_input = st.date_input("Purchase Date")
# 
#     if st.button("Add to Portfolio", type="primary"):
#         if ticker_input and shares > 0:
#             ticker_with_suffix = ticker_input.upper()
#             if exchange == 'NSE (India)':
#                 ticker_with_suffix += ".NS"
#             elif exchange == 'BSE (India)':
#                 ticker_with_suffix += ".BO"
# 
#             price_data = yf.download(
#                 ticker_with_suffix,
#                 start=purchase_date_input,
#                 end=purchase_date_input + timedelta(days=5),
#                 progress=False
#             )
# 
#             price_value = None
#             if not price_data.empty:
#                 price_value = price_data['Close'].iloc[0]
# 
#             if price_value is not None and float(price_value) > 0:
#                 new_row = pd.DataFrame([{
#                     'ticker': ticker_with_suffix,
#                     'display_ticker': ticker_input.upper(),
#                     'exchange': exchange,
#                     'shares': shares,
#                     'purchase_date': purchase_date_input.strftime('%Y-%m-%d'),
#                     'purchase_price': float(price_value)
#                 }])
#                 portfolio_df = pd.concat([portfolio_df, new_row], ignore_index=True)
#                 save_portfolio(portfolio_df)
#                 st.rerun()
#             else:
#                 st.error(f"Could not find price data for {ticker_input.upper()} on the selected date.")
# 
# # --- Main Dashboard ---
# if portfolio_df.empty:
#     st.info("Your portfolio is empty. Add a stock from the sidebar to begin tracking.")
# else:
#     tickers = portfolio_df['ticker'].tolist()
#     live_prices = {ticker: get_current_price(ticker) for ticker in tickers}
#     infos = {ticker: get_company_info(ticker) for ticker in tickers}
# 
#     portfolio_df['info'] = portfolio_df['ticker'].map(infos)
#     portfolio_df['currency_symbol'] = portfolio_df['info'].apply(lambda x: '₹' if x.get('currency') == 'INR' else '$')
#     portfolio_df['current_price'] = portfolio_df['ticker'].map(live_prices).fillna(0)
#     portfolio_df['current_value'] = portfolio_df['shares'] * portfolio_df['current_price']
#     portfolio_df['investment'] = portfolio_df['shares'] * portfolio_df['purchase_price']
#     portfolio_df['pnl'] = portfolio_df['current_value'] - portfolio_df['investment']
# 
#     tab1, tab2, tab3 = st.tabs(["📊 Portfolio Overview", "🔬 Deep Dive Analysis", "📜 Transaction History"])
# 
#     # --- Tab 1: Portfolio Overview ---
#     with tab1:
#         st.subheader("Holdings by Exchange")
#         nasdaq_df = portfolio_df[portfolio_df['exchange'] == 'NASDAQ (USA)']
#         nse_df = portfolio_df[portfolio_df['exchange'] == 'NSE (India)']
#         bse_df = portfolio_df[portfolio_df['exchange'] == 'BSE (India)']
# 
#         nasdaq_tab, nse_tab, bse_tab = st.tabs(["🇺🇸 NASDAQ", "🇮🇳 NSE", "🇮🇳 BSE"])
# 
#         def display_exchange_portfolio(df, exchange_name):
#             if df.empty:
#                 st.info(f"You have no holdings on the {exchange_name}.")
#                 return
# 
#             total_investment = df['investment'].sum()
#             total_current_value = df['current_value'].sum()
#             total_pnl = df['pnl'].sum()
#             currency_symbol = df['currency_symbol'].iloc[0] if not df.empty else '$'
# 
#             with st.container(border=True):
#                 col1, col2, col3 = st.columns(3)
#                 col1.metric("Total Investment", f"{currency_symbol}{total_investment:,.2f}")
#                 col2.metric("Current Value", f"{currency_symbol}{total_current_value:,.2f}")
#                 pnl_delta = f"{((total_pnl / total_investment) * 100):.2f}%" if total_investment > 0 else "0.00%"
#                 col3.metric("Profit & Loss", f"{currency_symbol}{total_pnl:,.2f}", delta=pnl_delta)
# 
#             for idx, row in df.iterrows():
#                 with st.container(border=True):
#                     col1, col_edit_btn = st.columns([5, 1])
#                     with col1:
#                         st.subheader(f"{row['display_ticker']} ({row['info'].get('longName', '')})")
#                     if col_edit_btn.button("Edit", key=f"edit_{idx}"):
#                         st.session_state.edit_index = idx
# 
#                     kpi1, kpi2, kpi3, kpi4 = st.columns(4)
#                     kpi1.metric("Current Value", f"{row['currency_symbol']}{row['current_value']:,.2f}")
#                     kpi2.metric("Profit/Loss", f"{row['currency_symbol']}{row['pnl']:,.2f}")
#                     kpi3.metric("Shares", f"{row['shares']}")
#                     kpi4.metric("Purchase Price", f"{row['currency_symbol']}{row['purchase_price']:,.2f}")
# 
#         with nasdaq_tab:
#             display_exchange_portfolio(nasdaq_df, "NASDAQ")
#         with nse_tab:
#             display_exchange_portfolio(nse_df, "NSE")
#         with bse_tab:
#             display_exchange_portfolio(bse_df, "BSE")
# 
#     # --- Edit dialog ---
#     if 'edit_index' in st.session_state and st.session_state.edit_index is not None:
#         i = st.session_state.edit_index
#         row = portfolio_df.loc[i]
# 
#         @st.dialog(f"Editing {row['display_ticker']}")
#         def edit_dialog():
#             st.write(f"Update the details for {row['display_ticker']}:")
#             new_shares = st.number_input("Shares", value=row['shares'], min_value=1, step=1)
#             new_price = st.number_input("Purchase Price", value=row['purchase_price'], min_value=0.01)
#             if st.button("Save Changes"):
#                 portfolio_df.at[i, 'shares'] = new_shares
#                 portfolio_df.at[i, 'purchase_price'] = new_price
#                 save_portfolio(portfolio_df)
#                 st.session_state.edit_index = None
#                 st.rerun()
# 
#     # --- Tab 2: Deep Dive Analysis ---
#     with tab2:
#         st.subheader("Individual Stock Deep Dive")
#         selected_display_ticker = st.selectbox("Select a stock for analysis:", options=portfolio_df['display_ticker'].unique())
# 
#         if selected_display_ticker:
#             item = portfolio_df[portfolio_df['display_ticker'] == selected_display_ticker].iloc[0]
#             ticker, info, currency_symbol = item['ticker'], item['info'], item['currency_symbol']
# 
#             analysis_tabs = st.tabs(["📈 Chart", "🏢 Profile"])
# 
#             # --- Chart Tab ---
#             with analysis_tabs[0]:
#                 time_range = st.radio(
#                     "Time Range",
#                     ["1M", "3M", "6M", "1Y", "5Y", "All"],  # ✅ removed 5D
#                     horizontal=True,
#                     index=0
#                 )
#                 period_map = {
#                     "1M": "1mo",
#                     "3M": "3mo",
#                     "6M": "6mo",
#                     "1Y": "1y",
#                     "5Y": "5y",
#                     "All": "max"
#                 }
# 
#                 hist_data = get_stock_data(ticker, period=period_map[time_range])
#                 if not hist_data.empty:
#                     hist_data['MA20'] = hist_data['Close'].rolling(window=20).mean()
#                     hist_data['MA50'] = hist_data['Close'].rolling(window=50).mean()
#                     fig = go.Figure(
#                         data=[
#                             go.Candlestick(
#                                 x=hist_data.index,
#                                 open=hist_data['Open'],
#                                 high=hist_data['High'],
#                                 low=hist_data['Low'],
#                                 close=hist_data['Close'],
#                                 name='Price'
#                             )
#                         ]
#                     )
#                     fig.add_trace(go.Scatter(
#                         x=hist_data.index,
#                         y=hist_data['MA20'],
#                         mode='lines',
#                         name='20-Day MA',
#                         line=dict(color='yellow', width=1)
#                     ))
#                     fig.add_trace(go.Scatter(
#                         x=hist_data.index,
#                         y=hist_data['MA50'],
#                         mode='lines',
#                         name='50-Day MA',
#                         line=dict(color='orange', width=1)
#                     ))
#                 else:
#                     fig = go.Figure()
# 
#                 fig.update_layout(
#                     title=f'{selected_display_ticker} Historical Price ({currency_symbol})',
#                     xaxis_rangeslider_visible=False
#                 )
#                 st.plotly_chart(fig, use_container_width=True)
# 
#             # --- Profile Tab ---
#             with analysis_tabs[1]:
#                 st.subheader(f"{info.get('longName', '')} ({info.get('symbol', '')})")
#                 st.markdown(f"**Website:** [{info.get('website', 'N/A')}]({info.get('website', 'N/A')})")
#                 st.markdown(info.get('longBusinessSummary', 'No summary available.'))
#                 st.subheader("Key Financial Ratios")
#                 ratios = {
#                     'P/E Ratio': 'trailingPE',
#                     'PEG Ratio': 'pegRatio',
#                     'Price to Sales': 'priceToSalesTrailing12Months',
#                     'Price to Book': 'priceToBook',
#                     'Debt to Equity': 'debtToEquity',
#                     'Return on Equity': 'returnOnEquity'
#                 }
#                 ratio_data = {name: info.get(key, 'N/A') for name, key in ratios.items()}
#                 st.table(pd.DataFrame(ratio_data.items(), columns=['Ratio', 'Value']))
# 
#     # --- Tab 3: Transaction History ---
#     with tab3:
#         st.subheader("Transaction Log")
#         st.dataframe(portfolio_df)
#

# Cell 7: Launch the App
from google.colab import userdata
from pyngrok import ngrok

NGROK_AUTH_TOKEN = userdata.get('NGROK_AUTH_TOKEN')
ngrok.kill()
try:
    ngrok.set_auth_token(NGROK_AUTH_TOKEN)
    public_url = ngrok.connect(8501)
    print("🚀 Your dashboard is live at:")
    print(public_url)
    !streamlit run portfolio_dashboard.py --server.port 8501
except Exception as e:
    print(f"❌ Ngrok authentication failed! Check your NGROK_AUTH_TOKEN. Error: {e}")